https://youtu.be/X48VuDVv0do?si=CLfuQV42HTKfx2jj

pod
service
ingress
volumes 
configmap
secrets
statefulset
deployment

Pod ->
-> Abstraction over container
-> It will create layer on container, it will abstract the container runtime so that you can replace them or you dont have to run with any
container tool like docker. Means you can interact with kubernetes layer
-> Usually one application per pod
-> each will get its own get ip(internal)
-> This can die very easily
-> new ip when new pod created
-> when two pods wants to communicate, if they are communicating through ip then when pod dies it will loose ip and come up with new ip,
so, because of that pod will use service for communication

Ingress ->
It will make the external connection with the service to interact with the pods

Ingress -> service -> node -> pod

Configmap ->

It wil have the configuration of the application. Consider if the url changes in the application,
you dont need to rebuild the application. you can just add in configmap because it will directly with the config map.

Secrets -> 
It will the secrets like consider dockerhub url and username and password

Volumes ->

Physical hardware mounting with pod so that if pod destroys no loosing of data

How zero down time will happen?
Service can two methods: Own can permanent ip or loadbalancer.
the replicas of has to be deployed in multiple nodes or single node. If the pod is the down, service will route the traffic to other.
this will happen by Deployments

Deployments (abstraction of pods) ->
It will create more replicas, if pod down, it will make it to spin up again.

StatefulSet -> It is same like Deployments which will help for replicas of pods and autoscaling. It is basically for 
databases. (Databases should be created using statefulset only due to data consistancy). 

----Databases will never be replica using Deployment because 
database has a state which pods are writing or reading, it will have data inconsistancy. So, either it will happen by statefulset or keep 
the db outside k8 cluster.

Stateful can't be easy so mostly databases will be kept outside k8 cluster in general.

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------

Worker machine in K8 cluster:

-> Multiple nodes
-> each nodes has multiple pods in it.
-> 3 processes must be installed in every nodes
     1. container runtime
     2. kubelet -> interacts with container runtime and the worker node. It start the pod with container inside and it will assign 
        the resources from node to the container.
     3. kube-proxy -> It will forward the request perfectly and avoid the network overhead . (Example if the db running making request to one
      pod, it will make the forward the request to same node instead of other node)
-> the communication between the pods will happen through the services.


-------------------------------------------------------------------------------------------------------------------------------------
=====================================================================================================================================

Master node:

1. Api server -> When user want to deploy the application, he has to interact with the api server. It is cluster gateway.
It is the gatekeeper kind of for autorized requests. User can query for the resources and other stuffs using k8 client.
request -> api server -> validate request -> other processes

2. schedular -> When you want to create a new pod, api server will communicate with schedular. schedular will decide how much to 
load resources on each node and where to deploy the pod. It will just decide on which node the new pod to be put.

3. Controller manager -> It will have the cluster state means it detects the cluster changes. Consider example, if the pod is died, it will communicate the schedular to reschedule it again (based on resources schedular will decide where to deploy). 
Controller manager -> schedular -> kubelet

4. etcd -> It is the cluster brain. Cluster changes will stored in key value pair. What is cluster health and what resources are available
and did the cluster state change. It will have these information. *** It will not have the application data ***

In general master node will be multiple in cluster, api server will be loadbalanced.

==> How to setup it?
1. get new bare server
2. add the master/worker node processes
3. add it to the cluster

production cluster setup =>

        master  master
--------------------------
 |     |    |    |     |
node node node node node


==================================================================================================================================

Minikube -> Master and worker processes on one machine. Docker runtime preinstalled
-> it will create the virtual box on laptop and the node will run in that.
-> 1 node k8 cluster.
-> minikube has a kubectl dependency.

We can commnunicate with api server by using k8 api, ui or kubectl client.

===================================================================================================================================

LAYER OF ABSTRACTION:

1. Deployment manages replicaset
2. Replicaset manages replica of pod 
3. pod is an abstraction of container

==============================================================================================================================




